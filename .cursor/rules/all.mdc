---
description: 
globs: 
alwaysApply: true
---
---
description: 
globs: 
alwaysApply: true
---
# Project Rules

This project is a prompt manager where I store all my favorite prompts for easy usage.


## Tech Stack

Frontend: Next.js, Tailwind, Shadcn, Framer Motion
Backend: PostgreSQL, Supabase, Drizzle
Auth: Clerk
Payments: Stripe

## General Rules

- use kebab case for naming files

### Comment Rules

- I am new to coding, please write lots of comments to help me understand the code.


## Frontend Rules

### Design Rules

- Use responsive design to account for all screen sizes.
- Always fetch data in a server component and pass down to a client component

### Component Rules

#### Client Component Rules

- Export client components as `export const MyComponent`


## Backend Rules

- Do not edit migration files. We use Drizzle to manage migrations automatically and never touch those files.
- Write db schemas as drizzle schemas in db/schema (Ex: db/schema/prompts-schema.ts)
- Write db queries with drizzle as server actions in an actions folder at the root (Ex: actions/prompts-actions.ts)


## Auth Rules

- We use Clerk for auth
- Use Clerk middleware to protect routes
- Use Clerk components (<UserButton>, <SignInButton>) for UI
- Use Clerk server-side helpers (auth()) in Server Actions to get the user ID


## Payment Rules
- Use Stripe for payments
- handle Stripe webhooks in /api/stripe/webhooks
- we have customers table for storing customer ids and subscription ids


